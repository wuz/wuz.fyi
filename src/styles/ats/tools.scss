@import './colors';

/* TOOL VARIABLES */
$browser-context: 16; // Default

/* FUNCTIONS */

/*
  * pow() - raise a number to an exponent
  * $number - the number to raise to the exponent
  * $exponent - the exponent to rais number to
  * Example: pow(2, 3) === 2^3 === 8
*/
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

/*
  * em() - convert a pixel value to ems
  * $pixels - the pixel size of the element
  * $context - the size that 1em should be, default: 16px per browser convention
  * Example: em(16) === 16px/16px === 1em
*/
@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

/*
 * _gettypescale() - internal function to calculate type scale
 * $n - the step in the typescale to return
 * Example: _gettypescale(1) === 12px
 * Scale:
 *  1 === 12px
 *  2 === 14px
 *  3 === 16px
 *  4 === 18px
 *  5 === 20px
 *  6 === 24px
 *  7 === 28px
 *  8 === 32px
 *  9 === 36px
 * More Information:
 * This scale is calculated using the following formula:
 * Ex: Step = 7
 * Take the step in the scale, subtract 2 and divide by 4
 * Ex: (7-2)/4 === 1.25
 * Round down from that number
 * Ex: 1.25 -> 1
 * Add 1 and multiply by 2
 * Ex: (1+1) * 2 === 4
 * Add the result of the formula for the previous step
 * Ex: 4 + _gettypescale(6) === 4 + 24 === 28
 * If the step is equal to one, return 12
 * Typescale calculator can be found here:
 * https://s.codepen.io/wuz/full/RdVOgG/yPkJjXZmegek
*/
@function _gettypescale($step) {
  @if $step == 1 {
    @return 12;
  } @else {
    @return ((floor(($step - 2)/4) + 1) * 2) + _gettypescale($step - 1);
  }
}

/*
 * typescale() - return the typescale system as a pixel or em
 * $step - step of the typescale to return
 * $em - boolean to determine if em values are returned - default false
 * Example: typescale(2, false) === 14px
*/
@function typescale($step: 1, $em: false) {
  @if $em {
    @return em(_gettypescale($step));
  } @else {
    @return #{_gettypescale($step)}px;
  }
}

/// Returns the color value for a given color name and group.
///
/// @param {String} $hue - The colorâ€™s hue.
/// @param {String} $value - The darkness/lightness of the color. Defaults to
/// base.
/// @param {Color} $for-background - The background color on which this color
/// will appear. Applies a multiply filter to ensure appropriate contrast.
/// @return {Color} The color value.

@function color($hue, $value: base, $for-background: null) {
  $fetched-color: map-get(map-get($colors, $hue), $value);

  @if map-has-key($colors, $fetched-color) {
    $fetched-color: map-get(map-get($colors, $fetched-color), $value);
  }

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    // stylelint-disable string-no-newline
    // prettier-ignore
    $error: "Color `#{$hue}, #{$value}` not found. Make sure arguments are strings. \nGOOD: color('yellow')\nBAD: color(yellow)\nAvailable options: #{available-names($colors)}";
    // stylelint-enable

    @error $error;
  }
}

/// Darkens the foreground color by the background color. This is the same as
/// the "multiply" filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.

@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: rgb(255, 255, 255);
  }

  $red: red($background) * red($foreground) / 255;
  $green: green($background) * green($foreground) / 255;
  $blue: blue($background) * blue($foreground) / 255;

  $opacity: opacity($foreground);
  $background-opacity: opacity($background);

  // calculate opacity
  $bm-red: $red * $opacity + red($background) * $background-opacity *
    (1 - $opacity);
  $bm-green: $green * $opacity + green($background) * $background-opacity *
    (1 - $opacity);
  $bm-blue: $blue * $opacity + blue($background) * $background-opacity *
    (1 - $opacity);

  @return rgb($bm-red, $bm-green, $bm-blue);
}
